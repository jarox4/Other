using System;
using System.Collections.Generic;
namespace Program 
{
    class _17 
    {
        public static void Main() 
        {
            Console.WriteLine("Type length of the password");
            int length = int.Parse(Console.ReadLine());
            Console.WriteLine(passwordGenerator(length));
        }
        public static string passwordGenerator(int length) 
        {
            //S{*&^%$#@!?.><,'},BL{ABCDEFGEHIJ...},sl{abcdefghij},n{1234567890}
            List<char> symbols = new List<char> {'!','@','#','$','%','^','&','*','/','?','>','.','<',',' };
            List<char> bigLetters = new List<char> {'Q','A','Z','W','S','X','E','D','C','R','F','V','T','G','B','Y','H','N','U','J','M','I','K','O','L','P' };
            List<char> smallLetters = new List<char>();
            {
                //making small letters list
                foreach (char letter in bigLetters) 
                {
                    smallLetters.Add(char.ToLower(letter));
                }
            }
            List<char> numbers = new List<char> {'1','2','3','4','5','6','7','8','9','0' };
            //making a password
            List<char> combs = new List<char> {'S','B','L','N' };
            string prePassword = string.Empty;
            for (int i = 0; i < length; i++) 
            {
                Random random = new Random();
                prePassword += combs[random.Next(0, 4)];
            }
            string password = string.Empty;
            foreach (char letter in prePassword) 
            {
                switch (letter) 
                {
                    case 'S':
                        password += symbols[new Random().Next(0, symbols.Count)];
                        break;
                    case 'B':
                        password += bigLetters[new Random().Next(0,bigLetters.Count)];
                        break;
                    case 'L':
                        password += smallLetters[new Random().Next(0, smallLetters.Count)];
                        break;
                    case 'N':
                        password += numbers[new Random().Next(0, numbers.Count)];
                        break;
                }
            }
            return password;
        }
    }
}
